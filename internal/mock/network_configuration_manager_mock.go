// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/network.go
//
// Generated by this command:
//
//	mockgen -source=../port/network.go -destination=network_configuration_manager_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetworkConfigurationManager is a mock of NetworkConfigurationManager interface.
type MockNetworkConfigurationManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkConfigurationManagerMockRecorder
	isgomock struct{}
}

// MockNetworkConfigurationManagerMockRecorder is the mock recorder for MockNetworkConfigurationManager.
type MockNetworkConfigurationManagerMockRecorder struct {
	mock *MockNetworkConfigurationManager
}

// NewMockNetworkConfigurationManager creates a new mock instance.
func NewMockNetworkConfigurationManager(ctrl *gomock.Controller) *MockNetworkConfigurationManager {
	mock := &MockNetworkConfigurationManager{ctrl: ctrl}
	mock.recorder = &MockNetworkConfigurationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkConfigurationManager) EXPECT() *MockNetworkConfigurationManagerMockRecorder {
	return m.recorder
}

// GetInterfaceName mocks base method.
func (m *MockNetworkConfigurationManager) GetInterfaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInterfaceName indicates an expected call of GetInterfaceName.
func (mr *MockNetworkConfigurationManagerMockRecorder) GetInterfaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceName", reflect.TypeOf((*MockNetworkConfigurationManager)(nil).GetInterfaceName))
}

// Run mocks base method.
func (m *MockNetworkConfigurationManager) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockNetworkConfigurationManagerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNetworkConfigurationManager)(nil).Run), ctx)
}
