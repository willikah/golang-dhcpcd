// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/infrastructure.go
//
// Generated by this command:
//
//	mockgen -source=../port/infrastructure.go -destination=infrastructure_mocks.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	dhcpv4 "github.com/insomniacslk/dhcp/dhcpv4"
	netlink "github.com/vishvananda/netlink"
	gomock "go.uber.org/mock/gomock"
)

// MockDHCPClient is a mock of DHCPClient interface.
type MockDHCPClient struct {
	ctrl     *gomock.Controller
	recorder *MockDHCPClientMockRecorder
	isgomock struct{}
}

// MockDHCPClientMockRecorder is the mock recorder for MockDHCPClient.
type MockDHCPClientMockRecorder struct {
	mock *MockDHCPClient
}

// NewMockDHCPClient creates a new mock instance.
func NewMockDHCPClient(ctrl *gomock.Controller) *MockDHCPClient {
	mock := &MockDHCPClient{ctrl: ctrl}
	mock.recorder = &MockDHCPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDHCPClient) EXPECT() *MockDHCPClientMockRecorder {
	return m.recorder
}

// RequestLease mocks base method.
func (m *MockDHCPClient) RequestLease(ctx context.Context, interfaceName string, timeout time.Duration) (*dhcpv4.DHCPv4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestLease", ctx, interfaceName, timeout)
	ret0, _ := ret[0].(*dhcpv4.DHCPv4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestLease indicates an expected call of RequestLease.
func (mr *MockDHCPClientMockRecorder) RequestLease(ctx, interfaceName, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestLease", reflect.TypeOf((*MockDHCPClient)(nil).RequestLease), ctx, interfaceName, timeout)
}

// MockNetworkManager is a mock of NetworkManager interface.
type MockNetworkManager struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkManagerMockRecorder
	isgomock struct{}
}

// MockNetworkManagerMockRecorder is the mock recorder for MockNetworkManager.
type MockNetworkManagerMockRecorder struct {
	mock *MockNetworkManager
}

// NewMockNetworkManager creates a new mock instance.
func NewMockNetworkManager(ctrl *gomock.Controller) *MockNetworkManager {
	mock := &MockNetworkManager{ctrl: ctrl}
	mock.recorder = &MockNetworkManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkManager) EXPECT() *MockNetworkManagerMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockNetworkManager) AddAddress(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockNetworkManagerMockRecorder) AddAddress(link, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockNetworkManager)(nil).AddAddress), link, addr)
}

// AddRoute mocks base method.
func (m *MockNetworkManager) AddRoute(route *netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoute indicates an expected call of AddRoute.
func (mr *MockNetworkManagerMockRecorder) AddRoute(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockNetworkManager)(nil).AddRoute), route)
}

// DeleteAddress mocks base method.
func (m *MockNetworkManager) DeleteAddress(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockNetworkManagerMockRecorder) DeleteAddress(link, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockNetworkManager)(nil).DeleteAddress), link, addr)
}

// DeleteRoute mocks base method.
func (m *MockNetworkManager) DeleteRoute(route *netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockNetworkManagerMockRecorder) DeleteRoute(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockNetworkManager)(nil).DeleteRoute), route)
}

// GetLinkByName mocks base method.
func (m *MockNetworkManager) GetLinkByName(interfaceName string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByName", interfaceName)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByName indicates an expected call of GetLinkByName.
func (mr *MockNetworkManagerMockRecorder) GetLinkByName(interfaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByName", reflect.TypeOf((*MockNetworkManager)(nil).GetLinkByName), interfaceName)
}

// ListAddresses mocks base method.
func (m *MockNetworkManager) ListAddresses(link netlink.Link) ([]netlink.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddresses", link)
	ret0, _ := ret[0].([]netlink.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddresses indicates an expected call of ListAddresses.
func (mr *MockNetworkManagerMockRecorder) ListAddresses(link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddresses", reflect.TypeOf((*MockNetworkManager)(nil).ListAddresses), link)
}

// ListRoutes mocks base method.
func (m *MockNetworkManager) ListRoutes() ([]netlink.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes")
	ret0, _ := ret[0].([]netlink.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockNetworkManagerMockRecorder) ListRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockNetworkManager)(nil).ListRoutes))
}

// SetLinkUp mocks base method.
func (m *MockNetworkManager) SetLinkUp(link netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLinkUp", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLinkUp indicates an expected call of SetLinkUp.
func (mr *MockNetworkManagerMockRecorder) SetLinkUp(link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLinkUp", reflect.TypeOf((*MockNetworkManager)(nil).SetLinkUp), link)
}

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
	isgomock struct{}
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// FileExists mocks base method.
func (m *MockFileManager) FileExists(filename string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", filename)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FileExists indicates an expected call of FileExists.
func (mr *MockFileManagerMockRecorder) FileExists(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockFileManager)(nil).FileExists), filename)
}

// ReadFile mocks base method.
func (m *MockFileManager) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileManagerMockRecorder) ReadFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileManager)(nil).ReadFile), filename)
}

// WriteFile mocks base method.
func (m *MockFileManager) WriteFile(filename string, data []byte, perm int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileManagerMockRecorder) WriteFile(filename, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileManager)(nil).WriteFile), filename, data, perm)
}
